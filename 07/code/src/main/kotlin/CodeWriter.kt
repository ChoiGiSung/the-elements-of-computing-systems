
import java.io.IOException

import java.text.MessageFormat

import java.text.SimpleDateFormat

import java.io.FileWriter

import java.io.File
import java.util.*

/**
 * from @ReionChan
 */
class CodeWriter {

    companion object{
        val DEST_FIX = ".asm"
        val SOURCE_FIX = ".vm"
        val SP = "SP"
        val SEGMENT_LCL = "LCL"
        val SEGMENT_ARG = "ARG"
        val SEGMENT_THIS = "THIS"
        val SEGMENT_THAT = "THAT"
        val LINE_SEPARATOR = System
            .getProperty("line.separator")
        val LABEL_PATTEN1 = "{0}\${1}"
        val LABEL_PATTEN2 = "{0}.{1}"
        val LABEL_PATTEN3 = "{0}.{1}.{2}"
        val L_BEGIN_TAG = "("
        val L_END_TAG = ")"
        val A_TAG = "@"
        val COMMENT_TAG = "//"
    }

    private var filePath: String? = null
    private var asmName: String? = null
    private var fWriter: FileWriter? = null
    private var seq = -1
    private var curVMFileName: String? = null

    fun setAsmName(asmStr: String?) {
        asmName = asmStr
    }

    fun setFilePath(filePath: String) {
        this.filePath = if (filePath.endsWith(File.separator)) filePath else filePath + File.separator
    }

    fun setFileName(filename: String) {
        val asmFileStr = if (asmName == null) filename else asmName!!
        if (fWriter == null) {
            try {
                val f = File(filePath + asmFileStr + DEST_FIX)
                if (f.exists()) {
                    f.delete()
                }
                fWriter = FileWriter(f)
                writeComment("	******* HACK ASM FILE GENERATED BY VM COMPILER *******")
                writeComment("	VM  FILE: $asmFileStr$SOURCE_FIX")
                writeComment("	COMPILER: JAVA_HACK_VM_COMPILER")
                writeComment(
                    "	GEN TIME: "
                            + SimpleDateFormat.getInstance().format(Date())
                            + LINE_SEPARATOR + LINE_SEPARATOR
                )
                writeInit()
            } catch (e: IOException) {
                e.printStackTrace()
            }
        }
        curVMFileName = filename
    }

    fun writeComment(contant: String) {
        try {
            fWriter!!.write("$COMMENT_TAG $contant$LINE_SEPARATOR")
        } catch (e: IOException) {
            e.printStackTrace()
        }
    }

    fun writeArithmetic(command: String?) {
        val strB = StringBuffer()
        val lab1: String
        val lab2: String
        val lab3: String
        var result: String
        if (("add".equals(command, ignoreCase = true) || "sub".equals(command, ignoreCase = true)
                    || "and".equals(command, ignoreCase = true)
                    || "or".equals(command, ignoreCase = true))
        ) {
            strB.append(A_TAG).append(SP).append(LINE_SEPARATOR)
                .append("AM=M-1").append(LINE_SEPARATOR).append("D=M")
                .append(LINE_SEPARATOR).append(A_TAG).append(SP)
                .append(LINE_SEPARATOR).append("AM=M-1")
                .append(LINE_SEPARATOR).append("[wildcard]")
                .append(LINE_SEPARATOR).append(A_TAG).append(SP)
                .append(LINE_SEPARATOR).append("M=M+1")
                .append(LINE_SEPARATOR)
            result = strB.toString()
        } else if (("eq".equals(command, ignoreCase = true)
                    || "gt".equals(command, ignoreCase = true)
                    || "lt".equals(command, ignoreCase = true))
        ) {
            ++seq
            lab1 = MessageFormat.format(
                LABEL_PATTEN3, *arrayOf<Any>(
                    "COMP",
                    seq, "TRUE"
                )
            )
            lab2 = MessageFormat.format(
                LABEL_PATTEN3, *arrayOf<Any>(
                    "COMP",
                    seq, "FALSE"
                )
            )
            lab3 = MessageFormat.format(
                LABEL_PATTEN3, *arrayOf<Any>(
                    "COMP",
                    seq, "END"
                )
            )
            strB.append(A_TAG).append(SP).append(LINE_SEPARATOR)
                .append("AM=M-1").append(LINE_SEPARATOR).append("D=M")
                .append(LINE_SEPARATOR).append(A_TAG).append(SP)
                .append(LINE_SEPARATOR).append("AM=M-1")
                .append(LINE_SEPARATOR).append("D=M-D")
                .append(LINE_SEPARATOR).append(A_TAG).append(lab1)
                .append(LINE_SEPARATOR).append("[wildcard]")
                .append(LINE_SEPARATOR).append(A_TAG).append(lab2)
                .append(LINE_SEPARATOR).append("0;JMP")
                .append(LINE_SEPARATOR).append(L_BEGIN_TAG).append(lab1)
                .append(L_END_TAG).append(LINE_SEPARATOR).append(A_TAG)
                .append(SP).append(LINE_SEPARATOR).append("A=M")
                .append(LINE_SEPARATOR).append("M=-1")
                .append(LINE_SEPARATOR).append(A_TAG).append(SP)
                .append(LINE_SEPARATOR).append("M=M+1")
                .append(LINE_SEPARATOR).append(A_TAG).append(lab3)
                .append(LINE_SEPARATOR).append("0;JMP")
                .append(LINE_SEPARATOR).append(L_BEGIN_TAG).append(lab2)
                .append(L_END_TAG).append(LINE_SEPARATOR).append(A_TAG)
                .append(SP).append(LINE_SEPARATOR).append("A=M")
                .append(LINE_SEPARATOR).append("M=0")
                .append(LINE_SEPARATOR).append(A_TAG).append(SP)
                .append(LINE_SEPARATOR).append("M=M+1")
                .append(LINE_SEPARATOR).append(L_BEGIN_TAG).append(lab3)
                .append(L_END_TAG).append(LINE_SEPARATOR)
        } else if (("neg".equals(command, ignoreCase = true)
                    || "not".equals(command, ignoreCase = true))
        ) {
            strB.append(A_TAG).append(SP).append(LINE_SEPARATOR)
                .append("AM=M-1").append(LINE_SEPARATOR)
                .append("[wildcard]").append(LINE_SEPARATOR).append(A_TAG)
                .append(SP).append(LINE_SEPARATOR).append("M=M+1")
                .append(LINE_SEPARATOR)
        }
        result = strB.toString()
        when (Arrays.asList<String?>(*Parser.TYPE_ARI_LOG).indexOf(command)) {
            0 -> result = result.replace("[wildcard]", "M=D+M")
            1 -> result = result.replace("[wildcard]", "M=M-D")
            2 -> result = result.replace("[wildcard]", "M=-M")
            3 -> result = result.replace("[wildcard]", "D;JEQ")
            4 -> result = result.replace("[wildcard]", "D;JGT")
            5 -> result = result.replace("[wildcard]", "D;JLT")
            6 -> result = result.replace("[wildcard]", "M=D&M")
            7 -> result = result.replace("[wildcard]", "M=D|M")
            else -> result = result.replace("[wildcard]", "M=!M")
        }
        try {
            fWriter!!.write(result)
        } catch (e: IOException) {
            e.printStackTrace()
        }
    }

    fun writePushPop(
        command: String?, segment: String,
        index: Int
    ) {
        val strB = StringBuffer()
        if (Parser.TYPE_PUSH.equals(command, ignoreCase = true)) {
            if (segment.equals("constant", ignoreCase = true)) {
                strB.append(A_TAG).append(index).append(LINE_SEPARATOR)
                    .append("D=A").append(LINE_SEPARATOR).append(A_TAG)
                    .append(SP).append(LINE_SEPARATOR).append("A=M")
                    .append(LINE_SEPARATOR).append("M=D")
                    .append(LINE_SEPARATOR).append(A_TAG).append(SP)
                    .append(LINE_SEPARATOR).append("M=M+1")
                    .append(LINE_SEPARATOR)
            }
            if ((segment.equals("local", ignoreCase = true)
                        || segment.equals("argument", ignoreCase = true)
                        || segment.equals("this", ignoreCase = true)
                        || segment.equals("that", ignoreCase = true))
            ) {
                val seg: String
                if (segment.equals("local", ignoreCase = true)) {
                    seg = SEGMENT_LCL
                } else if (segment.equals("argument", ignoreCase = true)) {
                    seg = SEGMENT_ARG
                } else if (segment.equals("this", ignoreCase = true)) {
                    seg = SEGMENT_THIS
                } else {
                    seg = SEGMENT_THAT
                }
                strB.append(A_TAG).append(index).append(LINE_SEPARATOR)
                    .append("D=A").append(LINE_SEPARATOR).append(A_TAG)
                    .append(seg).append(LINE_SEPARATOR).append("A=M")
                    .append(LINE_SEPARATOR).append("D=D+A")
                    .append(LINE_SEPARATOR).append("A=D")
                    .append(LINE_SEPARATOR).append("D=M")
                    .append(LINE_SEPARATOR).append(A_TAG).append(SP)
                    .append(LINE_SEPARATOR).append("A=M")
                    .append(LINE_SEPARATOR).append("M=D")
                    .append(LINE_SEPARATOR).append(A_TAG).append(SP)
                    .append(LINE_SEPARATOR).append("M=M+1")
                    .append(LINE_SEPARATOR)
            }
            if ((segment.equals("temp", ignoreCase = true)
                        || segment.equals("pointer", ignoreCase = true)
                        || segment.equals("static", ignoreCase = true))
            ) {
                val `var` = MessageFormat.format(
                    LABEL_PATTEN2, *arrayOf<Any?>(
                        curVMFileName, index
                    )
                )
                var base = 5
                if (segment.equals("pointer", ignoreCase = true)) {
                    base = 3
                }
                val varStr = if (segment.equals("static", ignoreCase = true)) `var` else ("R"
                        + (base + index))
                strB.append(A_TAG).append(varStr).append(LINE_SEPARATOR)
                    .append("D=M").append(LINE_SEPARATOR).append(A_TAG)
                    .append(SP).append(LINE_SEPARATOR).append("A=M")
                    .append(LINE_SEPARATOR).append("M=D")
                    .append(LINE_SEPARATOR).append(A_TAG).append(SP)
                    .append(LINE_SEPARATOR).append("M=M+1")
                    .append(LINE_SEPARATOR)
            }
        }
        if (Parser.TYPE_POP.equals(command, ignoreCase = true)) {
            if ((segment.equals("local", ignoreCase = true)
                        || segment.equals("argument", ignoreCase = true)
                        || segment.equals("this", ignoreCase = true)
                        || segment.equals("that", ignoreCase = true))
            ) {
                val seg: String
                if (segment.equals("local", ignoreCase = true)) {
                    seg = SEGMENT_LCL
                } else if (segment.equals("argument", ignoreCase = true)) {
                    seg = SEGMENT_ARG
                } else if (segment.equals("this", ignoreCase = true)) {
                    seg = SEGMENT_THIS
                } else {
                    seg = SEGMENT_THAT
                }
                strB.append(A_TAG).append(index).append(LINE_SEPARATOR)
                    .append("D=A").append(LINE_SEPARATOR).append(A_TAG)
                    .append(seg).append(LINE_SEPARATOR).append("A=M")
                    .append(LINE_SEPARATOR).append("D=D+A")
                    .append(LINE_SEPARATOR).append(A_TAG).append(seg)
                    .append(LINE_SEPARATOR).append("M=D")
                    .append(LINE_SEPARATOR).append(A_TAG).append(SP)
                    .append(LINE_SEPARATOR).append("AM=M-1")
                    .append(LINE_SEPARATOR).append("D=M")
                    .append(LINE_SEPARATOR).append(A_TAG).append(seg)
                    .append(LINE_SEPARATOR).append("A=M")
                    .append(LINE_SEPARATOR).append("M=D")
                    .append(LINE_SEPARATOR).append(A_TAG).append(index)
                    .append(LINE_SEPARATOR).append("D=A")
                    .append(LINE_SEPARATOR).append(A_TAG).append(seg)
                    .append(LINE_SEPARATOR).append("A=M")
                    .append(LINE_SEPARATOR).append("D=A-D")
                    .append(LINE_SEPARATOR).append(A_TAG).append(seg)
                    .append(LINE_SEPARATOR).append("M=D")
                    .append(LINE_SEPARATOR)
            }
            if ((segment.equals("temp", ignoreCase = true)
                        || segment.equals("pointer", ignoreCase = true)
                        || segment.equals("static", ignoreCase = true))
            ) {
                val `var` = MessageFormat.format(
                    LABEL_PATTEN2, *arrayOf<Any?>(
                        curVMFileName, index
                    )
                )
                var base = 5
                if (segment.equals("pointer", ignoreCase = true)) {
                    base = 3
                }
                val varStr = if (segment.equals("static", ignoreCase = true)) `var` else ("R"
                        + (base + index))
                strB.append(A_TAG).append(SP).append(LINE_SEPARATOR)
                    .append("AM=M-1").append(LINE_SEPARATOR).append("D=M")
                    .append(LINE_SEPARATOR).append(A_TAG)
                    .append(varStr)
                    .append(LINE_SEPARATOR).append("M=D")
                    .append(LINE_SEPARATOR)
            }
        }
        try {
            fWriter!!.write(strB.toString())
        } catch (e: IOException) {
            e.printStackTrace()
        }
    }

    fun writeInit() {
        val strB = StringBuffer()
        val spIndex = 0x100
        strB.append(COMMENT_TAG).append(" bootstrap").append(LINE_SEPARATOR)
            .append(A_TAG).append(spIndex).append(LINE_SEPARATOR)
            .append("D=A").append(LINE_SEPARATOR).append(A_TAG).append(SP)
            .append(LINE_SEPARATOR).append("M=D").append(LINE_SEPARATOR)
        try {
            fWriter!!.write(strB.toString())
        } catch (e: IOException) {
            e.printStackTrace()
        }
        writeCall("Sys.init", 0)
    }

    fun writeLabel(label: String?) {
        val strB = StringBuffer()
        strB.append(L_BEGIN_TAG).append(label).append(L_END_TAG)
            .append(LINE_SEPARATOR)
        try {
            fWriter!!.write(strB.toString())
        } catch (e: IOException) {
            e.printStackTrace()
        }
    }

    fun writeGoto(label: String?) {
        val strB = StringBuffer()
        strB.append(A_TAG).append(label).append(LINE_SEPARATOR).append("0;JMP")
            .append(LINE_SEPARATOR)
        try {
            fWriter!!.write(strB.toString())
        } catch (e: IOException) {
            e.printStackTrace()
        }
    }

    fun writeIf(label: String?) {
        val strB = StringBuffer()
        strB.append(A_TAG).append(SP).append(LINE_SEPARATOR).append("AM=M-1")
            .append(LINE_SEPARATOR).append("D=M").append(LINE_SEPARATOR)
            .append(A_TAG).append(label).append(LINE_SEPARATOR)
            .append("D;JNE").append(LINE_SEPARATOR)
        try {
            fWriter!!.write(strB.toString())
        } catch (e: IOException) {
            e.printStackTrace()
        }
    }

    fun writeCall(functionName: String?, numArgs: Int) {
        val strB = StringBuffer()
        val retLab = "RETURN" + (++seq)
        // PUSH return-address
        strB.append(A_TAG)
            .append(retLab)
            .append(LINE_SEPARATOR)
            .append("D=A")
            .append(LINE_SEPARATOR)
            .append(A_TAG)
            .append(SP)
            .append(LINE_SEPARATOR)
            .append("A=M")
            .append(LINE_SEPARATOR)
            .append("M=D")
            .append(LINE_SEPARATOR)
            .append(A_TAG)
            .append(SP)
            .append(LINE_SEPARATOR)
            .append("M=M+1")
            .append('\t')
            .append(COMMENT_TAG)
            .append(" push return-address")
            .append(LINE_SEPARATOR) // PUSH LCL
            .append(A_TAG)
            .append(SEGMENT_LCL)
            .append(LINE_SEPARATOR)
            .append("D=M")
            .append(LINE_SEPARATOR)
            .append(A_TAG)
            .append(SP)
            .append(LINE_SEPARATOR)
            .append("A=M")
            .append(LINE_SEPARATOR)
            .append("M=D")
            .append(LINE_SEPARATOR)
            .append(A_TAG)
            .append(SP)
            .append(LINE_SEPARATOR)
            .append("M=M+1")
            .append('\t')
            .append(COMMENT_TAG)
            .append(" push LCL")
            .append(LINE_SEPARATOR) // PUSH ARG
            .append(A_TAG)
            .append(SEGMENT_ARG)
            .append(LINE_SEPARATOR)
            .append("D=M")
            .append(LINE_SEPARATOR)
            .append(A_TAG)
            .append(SP)
            .append(LINE_SEPARATOR)
            .append("A=M")
            .append(LINE_SEPARATOR)
            .append("M=D")
            .append(LINE_SEPARATOR)
            .append(A_TAG)
            .append(SP)
            .append(LINE_SEPARATOR)
            .append("M=M+1")
            .append('\t')
            .append(COMMENT_TAG)
            .append(" push ARG")
            .append(LINE_SEPARATOR) // PUSH THIS
            .append(A_TAG)
            .append(SEGMENT_THIS)
            .append(LINE_SEPARATOR)
            .append("D=M")
            .append(LINE_SEPARATOR)
            .append(A_TAG)
            .append(SP)
            .append(LINE_SEPARATOR)
            .append("A=M")
            .append(LINE_SEPARATOR)
            .append("M=D")
            .append(LINE_SEPARATOR)
            .append(A_TAG)
            .append(SP)
            .append(LINE_SEPARATOR)
            .append("M=M+1")
            .append('\t')
            .append(COMMENT_TAG)
            .append(" push THIS")
            .append(LINE_SEPARATOR) // PUSH THAT
            .append(A_TAG).append(SEGMENT_THAT).append(LINE_SEPARATOR)
            .append("D=M").append(LINE_SEPARATOR).append(A_TAG)
            .append(SP)
            .append(LINE_SEPARATOR)
            .append("A=M")
            .append(LINE_SEPARATOR)
            .append("M=D")
            .append(LINE_SEPARATOR)
            .append(A_TAG)
            .append(SP)
            .append(LINE_SEPARATOR)
            .append("M=M+1")
            .append('\t')
            .append(COMMENT_TAG)
            .append(" push THAT")
            .append(LINE_SEPARATOR) // ARG = SP-n-5
            .append(A_TAG).append(SP).append(LINE_SEPARATOR).append("D=M")
            .append(LINE_SEPARATOR).append(A_TAG).append(numArgs)
            .append(LINE_SEPARATOR).append("D=D-A").append(LINE_SEPARATOR)
            .append(A_TAG).append(5).append(LINE_SEPARATOR).append("D=D-A")
            .append(LINE_SEPARATOR).append(A_TAG).append(SEGMENT_ARG)
            .append(LINE_SEPARATOR).append("M=D")
            .append('\t')
            .append(COMMENT_TAG)
            .append(" ARG = SP-n-5")
            .append(LINE_SEPARATOR) // LCL = SP
            .append(A_TAG).append(SP).append(LINE_SEPARATOR).append("D=M")
            .append(LINE_SEPARATOR).append(A_TAG).append(SEGMENT_LCL)
            .append(LINE_SEPARATOR).append("M=D").append('\t')
            .append(COMMENT_TAG).append(" LCL = SP").append(LINE_SEPARATOR)
        try {
            fWriter!!.write(strB.toString())
        } catch (e: IOException) {
            e.printStackTrace()
        }

        // GOTO f
        writeGoto(functionName)
        // (return-address)
        writeLabel(retLab)
    }

    fun writeReturn() {
        val strB = StringBuffer()
        strB.append(A_TAG)
            .append(SEGMENT_LCL)
            .append(LINE_SEPARATOR)
            .append("D=M")
            .append(LINE_SEPARATOR)
            .append(A_TAG)
            .append("frame")
            .append(LINE_SEPARATOR)
            .append("M=D")
            .append('\t')
            .append(COMMENT_TAG)
            .append(" FRAME = LCL")
            .append(LINE_SEPARATOR) // RET = *(FRAME-5)
            .append(A_TAG)
            .append(5)
            .append(LINE_SEPARATOR)
            .append("D=D-A")
            .append(LINE_SEPARATOR)
            .append("A=D")
            .append(LINE_SEPARATOR)
            .append("D=M")
            .append(LINE_SEPARATOR)
            .append(A_TAG)
            .append("ret")
            .append(LINE_SEPARATOR)
            .append("M=D")
            .append('\t')
            .append(COMMENT_TAG)
            .append(" RET = *(FRAME-5)")
            .append(LINE_SEPARATOR) // *ARG = pop
            .append(A_TAG)
            .append(SP)
            .append(LINE_SEPARATOR)
            .append("M=M-1")
            .append(LINE_SEPARATOR)
            .append("A=M")
            .append(LINE_SEPARATOR)
            .append("D=M")
            .append(LINE_SEPARATOR)
            .append(A_TAG)
            .append(SEGMENT_ARG)
            .append(LINE_SEPARATOR)
            .append("A=M")
            .append(LINE_SEPARATOR)
            .append("M=D")
            .append('\t')
            .append(COMMENT_TAG)
            .append(" *ARG = pop")
            .append(LINE_SEPARATOR) // SP = ARG+1
            .append(A_TAG)
            .append(SEGMENT_ARG)
            .append(LINE_SEPARATOR)
            .append("D=M+1")
            .append(LINE_SEPARATOR)
            .append(A_TAG)
            .append(SP)
            .append(LINE_SEPARATOR)
            .append("M=D")
            .append('\t')
            .append(COMMENT_TAG)
            .append(" SP = ARG+1")
            .append(LINE_SEPARATOR) // THAT = *(FRAME-1)
            .append(A_TAG)
            .append("frame")
            .append(LINE_SEPARATOR)
            .append("D=M")
            .append(LINE_SEPARATOR)
            .append(A_TAG)
            .append(1)
            .append(LINE_SEPARATOR)
            .append("D=D-A")
            .append(LINE_SEPARATOR)
            .append("A=D")
            .append(LINE_SEPARATOR)
            .append("D=M")
            .append(LINE_SEPARATOR)
            .append(A_TAG)
            .append(SEGMENT_THAT)
            .append(LINE_SEPARATOR)
            .append("M=D")
            .append('\t')
            .append(COMMENT_TAG)
            .append(" THAT = *(FRAME-1)")
            .append(LINE_SEPARATOR) // THIS = *(FRAME-2)
            .append(A_TAG)
            .append("frame")
            .append(LINE_SEPARATOR)
            .append("D=M")
            .append(LINE_SEPARATOR)
            .append(A_TAG)
            .append(2)
            .append(LINE_SEPARATOR)
            .append("D=D-A")
            .append(LINE_SEPARATOR)
            .append("A=D")
            .append(LINE_SEPARATOR)
            .append("D=M")
            .append(LINE_SEPARATOR)
            .append(A_TAG)
            .append(SEGMENT_THIS)
            .append(LINE_SEPARATOR)
            .append("M=D")
            .append('\t')
            .append(COMMENT_TAG)
            .append(" THIS = *(FRAME-2)")
            .append(LINE_SEPARATOR) // ARG = *(FRAME-3)
            .append(A_TAG).append("frame").append(LINE_SEPARATOR)
            .append("D=M").append(LINE_SEPARATOR).append(A_TAG).append(3)
            .append(LINE_SEPARATOR)
            .append("D=D-A")
            .append(LINE_SEPARATOR)
            .append("A=D")
            .append(LINE_SEPARATOR)
            .append("D=M")
            .append(LINE_SEPARATOR)
            .append(A_TAG)
            .append(SEGMENT_ARG)
            .append(LINE_SEPARATOR)
            .append("M=D")
            .append('\t')
            .append(COMMENT_TAG)
            .append(" ARG = *(FRAME-3)")
            .append(LINE_SEPARATOR) // LCL = *(FRAME-4)
            .append(A_TAG).append("frame").append(LINE_SEPARATOR)
            .append("D=M").append(LINE_SEPARATOR).append(A_TAG).append(4)
            .append(LINE_SEPARATOR).append("D=D-A").append(LINE_SEPARATOR)
            .append("A=D").append(LINE_SEPARATOR).append("D=M")
            .append(LINE_SEPARATOR).append(A_TAG).append(SEGMENT_LCL)
            .append(LINE_SEPARATOR).append("M=D")
            .append('\t')
            .append(COMMENT_TAG)
            .append(" LCL = *(FRAME-4)")
            .append(LINE_SEPARATOR) // JUMP TO Caller
            .append(A_TAG).append("ret").append(LINE_SEPARATOR)
            .append("A=M").append(LINE_SEPARATOR).append("0;JMP")
            .append('\t').append(COMMENT_TAG).append(" JUMP TO Caller")
            .append(LINE_SEPARATOR)
        try {
            fWriter!!.write(strB.toString())
        } catch (e: IOException) {
            e.printStackTrace()
        }
    }

    fun writeFunction(functionName: String?, numLocals: Int) {
        writeLabel(functionName)
        val strB = StringBuffer()
        for (i in 0 until numLocals) {
            strB.append(A_TAG).append(SP).append(LINE_SEPARATOR).append("A=M")
                .append(LINE_SEPARATOR).append("M=0")
                .append(LINE_SEPARATOR).append(A_TAG).append(SP)
                .append(LINE_SEPARATOR).append("M=M+1")
                .append(LINE_SEPARATOR)
        }
        try {
            fWriter!!.write(strB.toString())
        } catch (e: IOException) {
            e.printStackTrace()
        }
    }

    fun close() {
        if (fWriter != null) {
            try {
                fWriter!!.close()
            } catch (e: IOException) {
                e.printStackTrace()
            }
        }
    }
}